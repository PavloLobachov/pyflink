version: "3.9"
services:
  generator:
    image: python:3.9-slim
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-generator"
    hostname: generator
    ports:
      - "5555:5555"
    command: python twitter_stream_simulator.py
    working_dir: /opt/generator
    volumes:
      - ./generator/:/opt/generator
    networks:
      - my-network

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-zookeeper"
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - my-network


  # Kafka Broker
  broker-1:
    image: confluentinc/cp-kafka:7.0.1
    hostname: broker-1
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-broker-1"
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker-1:29092,EXTERNAL://broker-1:9092,HOST://broker-1:19092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker-1:29092,EXTERNAL://192.168.0.53:9092,HOST://localhost:19092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO,org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - my-network

  # Kafka Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.1
    hostname: schema-registry
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-schema-registry"
    restart: always
    depends_on:
      - zookeeper
      - broker-1
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker-1:29092'
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
    networks:
      - my-network

  # Flink job manager
  jobmanager:
    build:
      context: .
      dockerfile: Dockerfile
    image: ${IMAGE_NAME:-pyflink:1.19.1}
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-jobmanager"
    pull_policy: never
    platform: "linux/amd64"
    hostname: "jobmanager"
    env_file:
      - flink-env.env
    expose:
      - "6123"
    ports:
      - "8082:8081"
      - "6123:6123"
    volumes:
      - ./:/opt/flink/usrlib
      - ./keys/:/var/private/ssl/
      - ./src/:/opt/src
      - ./checkpoints/:/opt/checkpoints
    command: jobmanager 
    extra_hosts:
      - "host.docker.internal:127.0.0.1" #// Linux
      - "host.docker.internal:host-gateway" #// Access services on the host machine from within the Docker container
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.memory.heap.size: 2048m
        jobmanager.rpc.address: jobmanager
    networks:
      - my-network

  # Flink task manager
  taskmanager:
    image: ${IMAGE_NAME:-pyflink:1.19.1}
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-taskmanager"
    pull_policy: never
    platform: "linux/amd64"
    env_file:
      - flink-env.env
    expose:
      - "6121"
      - "6122"
    volumes:
      - ./:/opt/flink/usrlib
      - ./keys/:/var/private/ssl/
      - ./src/:/opt/src
      - ./checkpoints/:/opt/checkpoints
    depends_on:
      - jobmanager
    command: taskmanager --taskmanager.registration.timeout 5 min
    extra_hosts:
      - "host.docker.internal:127.0.0.1" #// Linux
      - "host.docker.internal:host-gateway" #// Access services on the host machine from within the Docker container
    environment:
      - |
        FLINK_PROPERTIES=
        taskmanager.heap.size: 4096m
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 15
        parallelism.default: 3
    networks:
      - my-network

  mongodb:
    image: mongodb/mongodb-community-server:6.0-ubi8
    container_name: "${CONTAINER_PREFIX:-twitter-stream}-mongodb"
    hostname: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
      - dbdata:/data/db

volumes:
  dbdata:

networks:
  my-network:
    name: my-network
    external: true